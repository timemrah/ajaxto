const ajaxto=new function(){const e={},t={},n={};let r=()=>{},a=()=>{},d=()=>{},o=()=>{},u=()=>{},s=()=>{},l=()=>{};t.method="GET",t.url=null,t.data={},t.header={},n.data=null,n.header=null,e.get=function(n){return t.method="GET",t.url=n,e},e.post=function(n){return t.method="POST",t.url=n,e},e.put=function(n){return t.method="PUT",t.url=n,e},e.delete=function(n){return t.method="DELETE",t.url=n,e},e.header=function(n,r){return t.header[n]=r,e},e.token=function(n){return t.header["Access-Control-Expose-Headers"]="X-Token",t.header["X-Token"]=n,e},e.progress=function(t){return r=t,e},e.done=function(t){return s=t,e},e.success=function(t){return a=t,e},e.fail=function(t){return d=t,e},e.resTrue=function(t){return o=t,e},e.resFalse=function(t){return u=t,e},e.notFound=function(t){return l=t,e},e.send=function(c){t.data=c;const h=new XMLHttpRequest;if(h.addEventListener("load",function(e){try{if(n.data=JSON.parse(this.responseText),void 0===n.data.status)throw{msg:"undefined status"};if(void 0===n.data.code)throw{msg:"undefined code"};if(void 0===n.data.msg)throw{msg:"undefined msg"};if(void 0===n.data.data)throw{msg:"undefined data"};let e={xhr:h,httpCode:h.status,...n.data};s(e),a(e),!0===e.status?o(e):u(e)}catch(e){let t={xhr:h,httpCode:h.status,status:!1,code:"badData",msg:e.message,data:null};s(t),d(t),u(t),404===t.httpCode&&l(t)}i.clearProcess()}),h.upload.addEventListener("progress",e=>{let t=e.loaded/e.total*100;r(t,e)}),"GET"===t.method){let e=new URLSearchParams(t.data).toString();t.url+="?"+e}h.open(t.method,t.url);for(let e in t.header){let n=t.header[e];h.setRequestHeader(e,n)}return"GET"!==t.method?h.send(t.data):h.send(),e};let i=new function(){this.clearProcess=function(){t.method="GET",t.url=null,t.data={},t.header={},n.data=null,n.header=null,r=(()=>{}),a=(()=>{}),d=(()=>{}),o=(()=>{}),u=(()=>{}),s=(()=>{}),l=(()=>{})}};return e};